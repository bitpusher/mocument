//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets7576503C061F7944A356B88B84EF520A4C2071832E6306E5F44D13EECC059E14))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets7576503C061F7944A356B88B84EF520A4C2071832E6306E5F44D13EECC059E14 : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySets7576503C061F7944A356B88B84EF520A4C2071832E6306E5F44D13EECC059E14()
        {
            this.EdmEntityContainerName = "TapesEntities";
            this.StoreEntityContainerName = "TapesModelStoreContainer";
            this.HashOverMappingClosure = "9231dc1feec85f1d54e8aeb2dd1668d73490e7bfe37b91be750dfb4862514019";
            this.HashOverAllExtentViews = "a6a091512592016aead70e56bc19f9a88d6cbd46b6281b4d8d4165426e99267b";
            this.ViewCount = 2;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for TapesModelStoreContainer.Tapes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TapesModelStoreContainer.Tapes", @"
    SELECT VALUE -- Constructing Tapes
        [TapesModel.Store.Tapes](T1.Tapes_Id, T1.Tapes_Description, T1.Tapes_OpenForRecording, T1.Tapes_AllowedIpAddress, T1.Tapes_Content)
    FROM (
        SELECT 
            T.Id AS Tapes_Id, 
            T.Description AS Tapes_Description, 
            T.OpenForRecording AS Tapes_OpenForRecording, 
            T.AllowedIpAddress AS Tapes_AllowedIpAddress, 
            T.Content AS Tapes_Content, 
            True AS _from0
        FROM TapesEntities.Tapes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TapesEntities.Tapes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TapesEntities.Tapes", @"
    SELECT VALUE -- Constructing Tapes
        [TapesModel.Tape](T1.Tape_Id, T1.Tape_Description, T1.Tape_OpenForRecording, T1.Tape_AllowedIpAddress, T1.Tape_Content)
    FROM (
        SELECT 
            T.Id AS Tape_Id, 
            T.Description AS Tape_Description, 
            T.OpenForRecording AS Tape_OpenForRecording, 
            T.AllowedIpAddress AS Tape_AllowedIpAddress, 
            T.Content AS Tape_Content, 
            True AS _from0
        FROM TapesModelStoreContainer.Tapes AS T
    ) AS T1");
        }
    }
}
